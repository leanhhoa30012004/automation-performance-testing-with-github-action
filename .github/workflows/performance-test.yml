name: Automation Performance Testing & Send Mail

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  perf-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build project (tạo fat jar)
        run: mvn clean package

      - name: Start API server in background
        run: |
          nohup java -jar target/automation-performance-testing-with-github-action-1.0.0-jar-with-dependencies.jar > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for server to be ready
        run: |
          for i in {1..20}; do
            if curl -sSf http://localhost:8080/api/health; then
              echo "Server is up!"
              exit 0
            fi
            sleep 3
          done
          echo "Server failed to start."
          cat app.log
          exit 1

      - name: Run performance test & generate report
        run: |
          java -cp target/automation-performance-testing-with-github-action-1.0.0-jar-with-dependencies.jar com.hoale.automation.performance.Main performance-config/api-performance.properties

      - name: Stop API server
        run: |
          kill $(cat app.pid) || true

      - name: Kiểm tra file HTML report sau khi chạy test
        run: |
          ls -l reports || true

      - name: Get committer email and date
        id: meta
        run: |
          echo "COMMIT_EMAIL=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git log -1 --pretty=format:'%cd' --date=format:'%Y-%m-%d')" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV

      - name: Install wkhtmltopdf
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf

      - name: Convert latest HTML report to PDF
        run: |
          mkdir -p pdf-report
          REPORT_FILE=$(ls -1t reports/*.html | head -1)
          if [ -z "$REPORT_FILE" ]; then
            echo "❌ Không tìm thấy file HTML báo cáo trong thư mục reports/!"
            ls -l reports || true
            exit 1
          fi
          echo "Dùng file báo cáo: $REPORT_FILE"
          PDF_FILE=pdf-report/perf-report-${{ env.COMMIT_DATE }}.pdf
          wkhtmltopdf --enable-local-file-access "$REPORT_FILE" "$PDF_FILE"
          echo "PDF_FILE=$PDF_FILE" >> $GITHUB_ENV


      - name: Send HTML report via Gmail using Python
        env:
          GMAIL_USER: ${{ secrets.EMAIL_USERNAME }}
          GMAIL_PASS: ${{ secrets.EMAIL_PASSWORD }}
          TO_EMAIL: ${{ env.COMMIT_EMAIL }},${{ secrets.EMAIL_OWNER }}
          PDF_FILE: ${{ env.PDF_FILE }}
          AUTHOR: ${{ env.COMMIT_AUTHOR }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          DATE: ${{ env.COMMIT_DATE }}
        run: |
          python3 <<EOF
          import smtplib
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          from email.mime.base import MIMEBase
          from email import encoders
          import os

          msg = MIMEMultipart()
          msg['From'] = os.environ['GMAIL_USER']
          msg['To'] = os.environ['TO_EMAIL']
          msg['Subject'] = f"[PerfTest] Performance Report for {os.environ['REPO']} ({os.environ['SHA']})"

          html = f'''
          <p>Hello <b>{os.environ['AUTHOR']}</b>,</p>
          <p>The automated performance test for your recent commit has finished.<br>
          Please find the attached PDF report for detailed results.</p>
          <ul>
            <li><b>Repo:</b> {os.environ['REPO']}</li>
            <li><b>Branch:</b> {os.environ['BRANCH']}</li>
            <li><b>Commit:</b> {os.environ['SHA']}</li>
            <li><b>Date:</b> {os.environ['DATE']}</li>
          </ul>
          <p style="color:gray;font-size:smaller;">--<br>Automation Performance Framework by leanhhoa30012004</p>
          '''
          msg.attach(MIMEText(html, 'html'))

          filename = os.environ['PDF_FILE']
          with open(filename, "rb") as f:
              part = MIMEBase('application', 'octet-stream')
              part.set_payload(f.read())
              encoders.encode_base64(part)
              part.add_header('Content-Disposition', f'attachment; filename={os.path.basename(filename)}')
              msg.attach(part)

          with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
              server.login(os.environ['GMAIL_USER'], os.environ['GMAIL_PASS'])
              server.sendmail(msg['From'], msg['To'].split(','), msg.as_string())
          EOF
      - name: Fail job if Maven fail
        if: failure()
        run: exit 1