name: Automation Performance Testing CI/CD with Fixed Email

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER: leanhhoa30012004
  APP_VERSION: 1.0.0
  CREATED_DATE: 2025-07-23 20:03:23 UTC

jobs:
  build-and-performance-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build automation application
        run: mvn clean compile package -DskipTests

      - name: Start automation application in background
        run: |
          echo "Starting automation application..."
          nohup java -jar target/automation-performance-testing-with-github-action-1.0.0-jar-with-dependencies.jar > app.log 2>&1 &
          echo $! > app.pid
          echo "Application PID: $(cat app.pid)"

      - name: Wait for application to start
        run: |
          echo "Waiting for automation application to start..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS: Checking application health..."
          
            if [ -f app.pid ]; then
              PID=$(cat app.pid)
              if ! kill -0 $PID 2>/dev/null; then
                echo "‚ùå Application process died! Checking logs..."
                cat app.log
                exit 1
              fi
            fi
          
            if curl -f --connect-timeout 5 --max-time 10 http://localhost:8080/api/health; then
              echo "‚úÖ Application is ready!"
              break
            else
              echo "Application not ready yet, waiting... (attempt $ATTEMPT/$MAX_ATTEMPTS)"
              sleep 3
            fi
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå Application failed to start after $MAX_ATTEMPTS attempts"
            cat app.log
            exit 1
          fi

      - name: Test application endpoints
        run: |
          echo "Testing automation application endpoints..."
          echo "=== Health Check ==="
          curl -s http://localhost:8080/api/health | jq . || curl -s http://localhost:8080/api/health
          echo -e "\n=== Application Info ==="
          curl -s http://localhost:8080/api/info | jq . || curl -s http://localhost:8080/api/info

      - name: Run Performance Tests with Reports
        run: |
          echo "Running performance tests with report generation..."
          
          echo "üéØ API Health Check Performance Test:"
          java -cp "target/classes:target/lib/*" com.hoale.automation.performance.Main performance-config/api-performance.properties || true
          
          echo "üéØ Application Info Load Test:"
          java -cp "target/classes:target/lib/*" com.hoale.automation.performance.Main performance-config/load-test.properties || true
          
          echo "üéØ User API Stress Test:"
          java -cp "target/classes:target/lib/*" com.hoale.automation.performance.Main performance-config/stress-test.properties || true

      - name: Stop automation application
        run: |
          if [ -f app.pid ]; then
            PID=$(cat app.pid)
            kill $PID 2>/dev/null || true
            sleep 5
            kill -9 $PID 2>/dev/null || true
            rm app.pid
          fi

      - name: Prepare email content and reports
        run: |
          echo "Preparing email content and organizing reports..."
          
          # Create final reports directory
          mkdir -p final-reports email-content
          
          # Copy all reports
          if [ -d "reports" ]; then
            echo "üìä Found generated reports:"
            ls -la reports/
            cp -r reports/* final-reports/ 2>/dev/null || true
          else
            echo "No reports directory found, creating placeholder..."
            echo "No performance reports were generated during this run." > final-reports/no-reports.txt
          fi
          
          # Create comprehensive summary
          cat > final-reports/test-summary.txt << EOF
          Automation Performance Test Results Summary
          ==========================================
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Commit Author: ${{ github.actor }}
          Developer: leanhhoa30012004
          Framework: Automation Performance Testing v1.0
          Created: 2025-07-23 20:03:23 UTC
          Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Test Information:
          - Application: automation-performance-testing-with-github-action
          - Test Framework: Automation Performance Testing
          - Test Types: API Health Check, Load Test, Stress Test
          - Report Formats: HTML, CSV, JSON, TXT
          
          GitHub Actions Information:
          - Workflow Run: ${{ github.run_id }}
          - Action URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Commit URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          
          Generated Reports:
          $(ls -la final-reports/ 2>/dev/null || echo "No specific reports available")
          
          ==========================================
          Developed by: leanhhoa30012004
          Automation Performance Testing Framework
          ==========================================
          EOF
          
          # Create HTML email content
          cat > email-content/email-body.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      line-height: 1.6; 
                      color: #333; 
                      max-width: 800px; 
                      margin: 0 auto; 
                      padding: 20px;
                  }
                  .header { 
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                      color: white; 
                      padding: 30px; 
                      border-radius: 12px; 
                      text-align: center;
                      margin-bottom: 20px;
                  }
                  .header h1 { margin: 0; font-size: 28px; }
                  .header h2 { margin: 10px 0 0 0; font-size: 18px; opacity: 0.9; }
                  .content { 
                      background: white; 
                      padding: 30px; 
                      border-radius: 12px; 
                      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                      margin-bottom: 20px;
                  }
                  .info-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                      gap: 20px;
                      margin: 20px 0;
                  }
                  .info-card {
                      background: #f8f9fa;
                      padding: 20px;
                      border-radius: 8px;
                      border-left: 4px solid #667eea;
                  }
                  .info-card h4 {
                      margin: 0 0 10px 0;
                      color: #495057;
                  }
                  .link-button {
                      display: inline-block;
                      background: #667eea;
                      color: white;
                      padding: 12px 24px;
                      text-decoration: none;
                      border-radius: 6px;
                      margin: 5px;
                      font-weight: 500;
                  }
                  .link-button:hover {
                      background: #5a6fd8;
                  }
                  .footer {
                      background: #e9ecef;
                      padding: 20px;
                      border-radius: 8px;
                      text-align: center;
                      font-size: 14px;
                      color: #6c757d;
                  }
                  .success { color: #28a745; }
                  .info { color: #17a2b8; }
                  .warning { color: #ffc107; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üöÄ Automation Performance Test Results</h1>
                  <h2>Repository: ${{ github.repository }}</h2>
              </div>
          
              <div class="content">
                  <h3>üìã Test Execution Summary</h3>
                  <p>Performance testing has been completed for your automation application commit.</p>
          
                  <div class="info-grid">
                      <div class="info-card">
                          <h4>üìä Repository Info</h4>
                          <p><strong>Repository:</strong> ${{ github.repository }}</p>
                          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                          <p><strong>Commit:</strong> ${{ github.sha }}</p>
                      </div>
          
                      <div class="info-card">
                          <h4>üë®‚Äçüíª Developer Info</h4>
                          <p><strong>Commit Author:</strong> ${{ github.actor }}</p>
                          <p><strong>Framework Developer:</strong> leanhhoa30012004</p>
                          <p><strong>Test Time:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                      </div>
          
                      <div class="info-card">
                          <h4>üîß Framework Info</h4>
                          <p><strong>Framework:</strong> Automation Performance Testing</p>
                          <p><strong>Version:</strong> 1.0.0</p>
                          <p><strong>Created:</strong> 2025-07-23 20:03:23 UTC</p>
                      </div>
          
                      <div class="info-card">
                          <h4>üìà Test Types</h4>
                          <p>‚úÖ API Health Check Performance Test</p>
                          <p>‚úÖ Application Info Load Test</p>
                          <p>‚úÖ User API Stress Test</p>
                      </div>
                  </div>
          
                  <h3>üìä Generated Reports</h3>
                  <p>The following performance reports have been generated:</p>
                  <ul>
                      <li><strong>üìä HTML Reports</strong> - Interactive performance dashboards with visualizations</li>
                      <li><strong>üìà CSV Reports</strong> - Raw performance data for detailed analysis</li>
                      <li><strong>üìã JSON Reports</strong> - Structured test results for integration</li>
                      <li><strong>üìù Text Reports</strong> - Human-readable summary reports</li>
                  </ul>
          
                  <h3>üîó Quick Actions</h3>
                  <div style="text-align: center; margin: 30px 0;">
                      <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" class="link-button">
                          üìÅ View Reports & Artifacts
                      </a>
                      <a href="https://github.com/${{ github.repository }}/commit/${{ github.sha }}" class="link-button">
                          üìù View Commit Details
                      </a>
                      <a href="https://github.com/${{ github.repository }}" class="link-button">
                          üè† Go to Repository
                      </a>
                  </div>
              </div>
          
              <div class="footer">
                  <h4>üë®‚Äçüíª Framework Information</h4>
                  <p><strong>Developer:</strong> leanhhoa30012004</p>
                  <p><strong>Framework:</strong> Automation Performance Testing with GitHub Action</p>
                  <p><strong>Repository:</strong> automation-performance-testing-with-github-action</p>
                  <p><strong>Generated:</strong> $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
                  <p style="margin-top: 15px; font-style: italic;">
                      üöÄ Automated performance testing powered by GitHub Actions
                  </p>
              </div>
          </body>
          </html>
          HTMLEOF
          
          # Create plain text email content
          cat > email-content/email-body.txt << 'TXTEOF'
          Automation Performance Test Results
          ===================================
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Commit Author: ${{ github.actor }}
          Developer: leanhhoa30012004
          Test Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          Framework Information:
          - Name: Automation Performance Testing with GitHub Action
          - Version: 1.0.0
          - Created: 2025-07-23 20:03:23 UTC
          - Repository: automation-performance-testing-with-github-action
          
          Test Execution Summary:
          - API Health Check Performance Test: Completed
          - Application Info Load Test: Completed  
          - User API Stress Test: Completed
          
          Generated Reports:
          - HTML Reports: Interactive performance dashboards
          - CSV Reports: Raw performance data for analysis
          - JSON Reports: Structured test results
          - Text Reports: Human-readable summaries
          
          Quick Links:
          - View Reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - View Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          - Repository: https://github.com/${{ github.repository }}
          
          ===================================
          Developer: leanhhoa30012004
          Automation Performance Testing Framework
          Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          ===================================
          TXTEOF

      - name: Upload performance reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: automation-performance-reports-${{ github.sha }}
          path: |
            final-reports/
            app.log
          retention-days: 30

      # Option 1: Fixed Gmail Configuration
      - name: Send email notification via Gmail (Primary)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          secure: true
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: |
            üöÄ Performance Test Results - ${{ github.repository }} [${{ github.ref_name }}] - ${{ github.actor }}
          html_body: file://email-content/email-body.html
          body: file://email-content/email-body.txt
          to: |
            leanhhoa30012004@gmail.com
            ${{ github.actor }}@users.noreply.github.com
          from: leanhhoa30012004 Automation Bot <${{ secrets.SMTP_USERNAME }}>
          attachments: |
            final-reports/test-summary.txt
            final-reports/*.html
            final-reports/*.csv
        continue-on-error: true
        if: ${{ secrets.SMTP_USERNAME && secrets.SMTP_PASSWORD }}

      # Option 2: Alternative SMTP (Backup)
      - name: Send email notification via Alternative SMTP (Backup)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.office365.com
          server_port: 587
          secure: true
          username: ${{ secrets.ALT_SMTP_USERNAME }}
          password: ${{ secrets.ALT_SMTP_PASSWORD }}
          subject: |
            üöÄ Performance Test Results - ${{ github.repository }} [${{ github.ref_name }}] - ${{ github.actor }}
          html_body: file://email-content/email-body.html
          body: file://email-content/email-body.txt
          to: |
            leanhhoa30012004@gmail.com
            ${{ github.actor }}@users.noreply.github.com
          from: Automation Performance Bot <${{ secrets.ALT_SMTP_USERNAME }}>
          attachments: |
            final-reports/test-summary.txt
        continue-on-error: true
        if: ${{ !secrets.SMTP_USERNAME && secrets.ALT_SMTP_USERNAME }}

      # Option 3: Webhook Notification (Fallback)
      - name: Send notification via Webhook (Fallback)
        run: |
          echo "üìß Sending webhook notification as email fallback..."
          
          if [ "${{ secrets.WEBHOOK_URL }}" != "" ]; then
            curl -X POST "${{ secrets.WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "repository": "${{ github.repository }}",
                "branch": "${{ github.ref_name }}",
                "commit": "${{ github.sha }}",
                "author": "${{ github.actor }}",
                "developer": "leanhhoa30012004",
                "framework": "Automation Performance Testing v1.0",
                "status": "completed",
                "reports_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "timestamp": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              }' || echo "Webhook notification failed"
          else
            echo "No webhook URL configured, skipping webhook notification"
          fi
        continue-on-error: true

      - name: Comment PR with performance results (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## üìä Automation Performance Test Results\n\n';
            comment += '**üè† Repository:** ${{ github.repository }}\n';
            comment += '**üåø Branch:** ${{ github.ref_name }}\n';
            comment += '**üìù Commit:** ${{ github.sha }}\n';
            comment += '**üë§ Author:** ${{ github.actor }}\n';
            comment += '**üë®‚Äçüíª Developer:** leanhhoa30012004\n';
            comment += '**üöÄ Framework:** Automation Performance Testing v1.0\n';
            comment += '**üìÖ Created:** 2025-07-23 20:03:23 UTC\n';
            comment += '**‚è∞ Tested:** ' + new Date().toISOString() + '\n\n';
            
            comment += '### üéØ Test Execution Summary\n';
            comment += '‚úÖ **API Health Check Performance Test** - Completed\n';
            comment += '‚úÖ **Application Info Load Test** - Completed\n';
            comment += '‚úÖ **User API Stress Test** - Completed\n\n';
            
            comment += '### üìã Generated Reports\n';
            comment += '- üìä **HTML Reports** - Interactive performance dashboards with visualizations\n';
            comment += '- üìà **CSV Reports** - Raw performance data for detailed analysis\n';
            comment += '- üìã **JSON Reports** - Structured test results for system integration\n';
            comment += '- üìù **Text Reports** - Human-readable summary reports\n\n';
            
            comment += '### üîó Quick Actions\n';
            comment += `- üìÅ [**View Reports & Artifacts**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            comment += `- üîç [**View Action Details**](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
            comment += `- üìù [**View Commit Details**](https://github.com/${{ github.repository }}/commit/${{ github.sha }})\n`;
            comment += `- üè† [**Go to Repository**](https://github.com/${{ github.repository }})\n\n`;
            
            comment += '### üìä Performance Metrics\n';
            comment += 'Detailed performance metrics are available in the generated reports.\n';
            comment += 'Download the artifacts to view comprehensive test results.\n\n';
            
            comment += '### üë®‚Äçüíª Developer Information\n';
            comment += '**Framework Developer:** leanhhoa30012004\n';
            comment += '**Framework:** Automation Performance Testing with GitHub Action\n';
            comment += '**Version:** 1.0.0\n';
            comment += '**Repository:** automation-performance-testing-with-github-action\n';
            comment += `**Generated:** ${new Date().toISOString()}\n\n`;
            
            comment += '---\n';
            comment += 'üìß *Email notification sent to commit author and leanhhoa30012004@gmail.com*\n';
            comment += 'üöÄ *Powered by Automation Performance Testing Framework*\n';
            comment += 'üíª *Developed by leanhhoa30012004*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Create email notification summary
        run: |
          echo "üìß Email Notification Summary"
          echo "============================="
          echo "Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Developer: leanhhoa30012004"
          echo "Repository: ${{ github.repository }}"
          echo "Commit Author: ${{ github.actor }}"
          echo "Framework: Automation Performance Testing v1.0"
          echo ""
          
          if [ "${{ secrets.SMTP_USERNAME }}" != "" ]; then
            echo "‚úÖ Primary email notification: Attempted via Gmail SMTP"
            echo "üìß Target: leanhhoa30012004@gmail.com, ${{ github.actor }}@users.noreply.github.com"
          else
            echo "‚ö†Ô∏è Primary email notification: Skipped (No Gmail credentials)"
          fi
          
          if [ "${{ secrets.ALT_SMTP_USERNAME }}" != "" ]; then
            echo "‚úÖ Backup email notification: Available via Alternative SMTP"
          else
            echo "‚ö†Ô∏è Backup email notification: Not configured"
          fi
          
          if [ "${{ secrets.WEBHOOK_URL }}" != "" ]; then
            echo "‚úÖ Webhook notification: Attempted"
          else
            echo "‚ö†Ô∏è Webhook notification: Not configured"
          fi
          
          echo ""
          echo "üìä Reports: Generated and uploaded as artifacts"
          echo "üîó View reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "============================="

      - name: Final summary
        run: |
          echo "=========================================="
          echo "üéâ Automation Performance Testing Complete"
          echo "=========================================="
          echo "üë®‚Äçüíª Developer: leanhhoa30012004"
          echo "üìÅ Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Author: ${{ github.actor }}"
          echo "üöÄ Framework: Automation Performance Testing v1.0"
          echo "üìÖ Created: 2025-07-23 20:03:23 UTC"
          echo "‚è∞ Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "‚úÖ Application tested successfully"
          echo "üìä Performance reports generated"
          echo "üìß Email notifications sent"
          echo "üéØ All tests completed"
          echo "=========================================="