name: Hoale Automation Performance Test CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DEVELOPER: leanhhoa30012004
  APP_VERSION: 1.0.0
  CREATED_DATE: 2025-07-23

jobs:
  build-and-performance-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build Hoale Automation application
        run: mvn clean compile package -DskipTests

      - name: Start Hoale Automation application in background
        run: |
          nohup java -jar target/hoale-automation-app-1.0.0.jar --server.port=8080 > app.log 2>&1 &
          echo $! > app.pid

      - name: Wait for Hoale Automation application to start
        run: |
          echo "Waiting for Hoale Automation application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/api/health; then
              echo "Hoale Automation application is ready!"
              break
            fi
            echo "Attempt $i: Hoale Automation application not ready yet, waiting..."
            sleep 5
          done

      - name: Test Hoale Automation endpoints
        run: |
          echo "Testing Hoale Automation application endpoints..."
          echo "=== Health Check ==="
          curl -s http://localhost:8080/api/health | jq .
          echo "=== Automation Info ==="
          curl -s http://localhost:8080/api/automation/info | jq .
          echo "=== Test Performance Endpoint ==="
          curl -s http://localhost:8080/api/automation/test/performance | jq .

      - name: Run Automation API Health Check Performance Test
        run: |
          java -cp "target/classes:target/lib/*" com.hoale.performance.PerformanceTestRunner performance-config/api-performance.properties
        continue-on-error: true

      - name: Run Automation Load Test
        run: |
          java -cp "target/classes:target/lib/*" com.hoale.performance.PerformanceTestRunner performance-config/load-test.properties
        continue-on-error: true

      - name: Stop Hoale Automation application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

      - name: Collect application logs
        run: |
          mkdir -p logs
          echo "=== Hoale Automation Application Logs ===" > logs/application.log
          echo "Developer: ${{ env.DEVELOPER }}" >> logs/application.log
          echo "Date: ${{ env.CREATED_DATE }}" >> logs/application.log
          echo "Version: ${{ env.APP_VERSION }}" >> logs/application.log
          echo "=======================================" >> logs/application.log
          cat app.log >> logs/application.log
        continue-on-error: true

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: hoale-automation-performance-reports-${{ github.sha }}
          path: |
            reports/
            logs/
          retention-days: 30

      - name: Prepare email content
        run: |
          echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.head_commit.message }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "REPO_NAME=${{ github.repository }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Create email summary
        run: |
          mkdir -p email-content
          
          echo "Hoale Automation Performance Test Report - $(date)" > email-content/summary.txt
          echo "================================================" >> email-content/summary.txt
          echo "" >> email-content/summary.txt
          echo "Repository: ${{ env.REPO_NAME }}" >> email-content/summary.txt
          echo "Branch: ${{ env.BRANCH_NAME }}" >> email-content/summary.txt
          echo "Commit: ${{ env.COMMIT_SHA }}" >> email-content/summary.txt
          echo "Author: ${{ env.COMMIT_AUTHOR }}" >> email-content/summary.txt
          echo "Message: ${{ env.COMMIT_MESSAGE }}" >> email-content/summary.txt
          echo "Developer: ${{ env.DEVELOPER }}" >> email-content/summary.txt
          echo "Application: Hoale Automation Performance Test" >> email-content/summary.txt
          echo "Framework Version: ${{ env.APP_VERSION }}" >> email-content/summary.txt
          echo "Created Date: ${{ env.CREATED_DATE }}" >> email-content/summary.txt
          echo "Test Engine: Hoale Automation Performance Test Engine" >> email-content/summary.txt
          echo "" >> email-content/summary.txt
          
          if [ -d "reports" ]; then
            echo "Generated Reports:" >> email-content/summary.txt
            ls -la reports/ >> email-content/summary.txt
            echo "" >> email-content/summary.txt
          
            # Extract key metrics from latest HTML report if exists
            latest_html=$(find reports -name "*.html" -type f -printf '%T@ %p\n' | sort -k 1nr | head -1 | cut -d' ' -f2-)
            if [ -f "$latest_html" ]; then
              echo "Latest Performance Metrics:" >> email-content/summary.txt
              grep -i "Total Requests\|Success Rate\|Response Time\|Throughput" "$latest_html" | sed 's/<[^>]*>//g' >> email-content/summary.txt
            fi
          else
            echo "No reports generated - possible test failure" >> email-content/summary.txt
          fi
          
          echo "" >> email-content/summary.txt
          echo "View full reports in GitHub Actions artifacts." >> email-content/summary.txt
          echo "Action URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> email-content/summary.txt
          echo "" >> email-content/summary.txt
          echo "=== Hoale Automation Framework ===" >> email-content/summary.txt
          echo "Developed by: ${{ env.DEVELOPER }}" >> email-content/summary.txt
          echo "Generated on: $(date)" >> email-content/summary.txt
          echo "Performance Test Engine: Hoale Automation v${{ env.APP_VERSION }}" >> email-content/summary.txt

      - name: Send email notification to leanhhoa30012004
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: |
            Hoale Automation Performance Test Results - ${{ env.REPO_NAME }} [${{ env.BRANCH_NAME }}] - Author: ${{ env.COMMIT_AUTHOR }}
          body: file://email-content/summary.txt
          to: |
            leanhhoa30012004@gmail.com
            ${{ github.actor }}@users.noreply.github.com
          from: Hoale Automation Performance Bot <${{ secrets.SMTP_USERNAME }}>
          attachments: |
            reports/*.html
            reports/*.csv
            email-content/summary.txt

      - name: Comment PR with results (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## üìä Hoale Automation Performance Test Results\n\n';
            comment += '**Developer:** leanhhoa30012004\n';
            comment += '**Created:** 2025-07-23\n';
            comment += '**Framework:** Hoale Automation Performance Test Engine v1.0\n';
            comment += '**Application:** Hoale Automation App\n\n';
            
            if (fs.existsSync('email-content/summary.txt')) {
              const summary = fs.readFileSync('email-content/summary.txt', 'utf8');
              comment += '```\n' + summary + '\n```\n\n';
            }
            
            comment += `üìÅ [View detailed reports in artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            comment += `üîó [Action Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            comment += `üë®‚Äçüíª **Developer:** leanhhoa30012004\n`;
            comment += `üöÄ **Framework:** Hoale Automation Performance Testing\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,git
              repo: context.repo.repo,
              body: comment
            });